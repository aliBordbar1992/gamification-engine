#!/usr/bin/env node

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const SWAGGER_URL = 'http://localhost:5046/swagger/v1/swagger.json';
const OUTPUT_DIR = './src/api/generated';
const CONFIG_FILE = './openapi-generator-config.json';

console.log('üöÄ Starting API generation from Swagger specification...');

// Check if backend is running
async function checkBackendHealth() {
  try {
    const response = await fetch(SWAGGER_URL);
    if (!response.ok) {
      throw new Error(`Backend not responding: ${response.status}`);
    }
    console.log('‚úÖ Backend is running and accessible');
    return true;
  } catch (error) {
    console.error('‚ùå Backend is not running or not accessible:', error.message);
    console.log('üí° Please start your backend with: dotnet run --project src/GamificationEngine.Api');
    return false;
  }
}

// Clean previous generated files
function cleanGeneratedFiles() {
  if (fs.existsSync(OUTPUT_DIR)) {
    console.log('üßπ Cleaning previous generated files...');
    fs.rmSync(OUTPUT_DIR, { recursive: true, force: true });
  }
}

// Generate API client
function generateApiClient() {
  console.log('‚öôÔ∏è  Generating TypeScript API client...');
  
  try {
    const command = `npx @openapitools/openapi-generator-cli generate -i ${SWAGGER_URL} -g typescript-axios -o ${OUTPUT_DIR} -c ${CONFIG_FILE}`;
    
    execSync(command, { 
      stdio: 'inherit',
      cwd: process.cwd()
    });
    
    console.log('‚úÖ API client generated successfully!');
  } catch (error) {
    console.error('‚ùå Failed to generate API client:', error.message);
    process.exit(1);
  }
}

// Create index file for easy imports
function createIndexFile() {
  console.log('üìù Creating index file for easy imports...');
  
  const indexPath = path.join(OUTPUT_DIR, 'index.ts');
  const indexContent = `// Auto-generated API client exports
// This file is automatically generated - do not edit manually

export * from './apis';
export * from './models';
export { Configuration } from './base';
export { DefaultApi } from './base';
`;

  fs.writeFileSync(indexPath, indexContent);
  console.log('‚úÖ Index file created');
}

// Update gitignore to exclude generated files from version control
function updateGitignore() {
  const gitignorePath = './.gitignore';
  const gitignoreEntry = '\n# Generated API client\nsrc/api/generated/\n';
  
  if (fs.existsSync(gitignorePath)) {
    const content = fs.readFileSync(gitignorePath, 'utf8');
    if (!content.includes('src/api/generated/')) {
      fs.appendFileSync(gitignorePath, gitignoreEntry);
      console.log('‚úÖ Updated .gitignore to exclude generated files');
    }
  } else {
    fs.writeFileSync(gitignorePath, gitignoreEntry);
    console.log('‚úÖ Created .gitignore to exclude generated files');
  }
}

// Main execution
async function main() {
  try {
    // Check if backend is running
    const backendRunning = await checkBackendHealth();
    if (!backendRunning) {
      process.exit(1);
    }

    // Clean previous files
    cleanGeneratedFiles();

    // Generate API client
    generateApiClient();

    // Create index file
    createIndexFile();

    // Update gitignore
    updateGitignore();

    console.log('\nüéâ API generation completed successfully!');
    console.log('üìÅ Generated files are in:', OUTPUT_DIR);
    console.log('üí° You can now import APIs like: import { RulesApi, Rule } from "@/api/generated"');
    
  } catch (error) {
    console.error('‚ùå API generation failed:', error.message);
    process.exit(1);
  }
}

main();
